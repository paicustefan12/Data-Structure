Am facut cate o structura pentru lista supermarket, pentru produs cumparat si respectiv pentru lista cumparaturi si apoi pentru fiecare cate o structura de tip lista pentru toate. Exista inca 2 structuri, una pentru stiva si cealalta pentru arbore.
Prima functie adauga un element de tip structura lista supermarket in lista1 in care sunt toate produsele prezente in supermarket, iar cea de-a doua functie adauga un element de tip structura produs cumparat in lista2 in care sunt toate produsele ce trebuie cumparate.
In functia citire1 sunt citite si adaugate in lista1 toate produsele prezente in supermarket.Citirea se face prin intermediul unei variabile a de tip structura lista supermarket.Pentru adaugarea unui element se apeleaza functia adaug_el1 descrisa mai sus.
In functia citire2 sunt citite si adaugate in lista2 toate produsele ce trebuie cumparate din supermarket.Citirea se face prin intermediul unei variabile a de tip structura produs cumparat.Pentru adaugarea unui element se apeleaza functia adaug_el2 descrisa mai sus.
Functia elim_nod elimina un nod din cea de-a doua lista si este apelata in funcita eliminare in care se verifica daca produsul din lista2 are stocul 1 sau 0 in lista1, iar daca stocul este 0 acesta este eliminat din lista2.
Functia adaug_el3 adauga un element in lista3, element ce contine numele si categoria unui element din lista2, iar cantitatea este o variabila k de tip int.
In functia lcump am parcurs toate elementele din lista2 si am folosit variabila OK1 pentru a verifica daca elementul trebuie pozitionat in capul de lista.Pentru fiecare element din lista2 verific daca are acelasi nume cu un element din lista1, iar cand acesta are acelasi nume cu un element din lista1 pastrez pretul acestuia si cantitatea mai mica.Apoi verific daca bugetul prezent(suma de bani cu care au fost cumparate produsele pana la momentul respectiv) este mai mic decat bugetul maxim, iar daca este mai mic introduc produsul in lista3 cu cantitatea maxima ce poate fi introdusa.Daca bugetul prezent este mai mare decat bugetul maxim, atunci verific cate produse pot fi cumparate si cand am gasit numarul de produse ce pot fi cumparate cu bugetul maxim ies din structura repetitiva si introduc produsul in lista3 cu cantitatea ce a putut fi cumparata cu bugetul maxim.
Functia adaug_el31 adauga un element in lista3, element ce contine numele si categoria unui element din lista2, iar cantitatea este o variabila k de tip int.
In functia lcump_neli am parcurs toate elementele din lista2 si am folosit variabila OK pt a verifica daca elementul trebuie pozitionat in capul de lista.Apoi parcurg toate elementele din lista1 si daca elementul din lista2 apare in lista1, atunci verific cantitea dorita si cantitatea prezenta in supermarket. Daca cea dorita este mai mica decat cea din supermarket atunci introduc elementul in lista3 si in lista2 cantitatea produsului se face 0, dar daca cea dorita este mai mare decat cea prezenta in supermarket atunci introduc elementul in lista3 cu cantitatea prezenta in supermarket si salvez cantitatea ramasa in variabila c1. Pentru a vedea cu ce element trebuie sa completez in lista3, parcurg lista1 si vad care este diferenta minima intre produse din aceeasi categorie, iar apoi mai parcurg inca o data lista1, iar daca pentru produse din aceeeasi categorie diferenta este egala cu diferenta minima aflata anterior, atunci introduc in lista3 acest produs ori cu cantitatea acestuia din lista1, ori cu cantitatea din variabila c1, depinde care dintre cele doua este mai mica.
Functiile isEmpty, push, pop si top sunt folosite pentru a vedea daca stiva este goala, pentru a introduce un element in stiva, pentru a scoate un element din stiva si pentru a vedea valoarea elementului top din stiva. 
In functia pstiva creez vectorul in care este prezentata cerinta 6 a temei.Am folosit doua stive pentru crearea acestui vector. In prima stiva compar valoarea unui element din lista1 cu cele anterioare din aceasta lista, iar cand timp acesta e mai mic decat celelalte, pe acestea le introduc in cea de-a doua stiva. In tot acest timp numar cate valori au fost introduse in cea de-a doua stiva, iar aceste numar il introduc in vector. Dupa ce am verificat pentru un element, golesc stiva2 si repet acesta pana la ultimul produs din lista1.
Functiile creare_arbore, alc_arbore, preorder sunt folosite pentru alocarea unui arbore de dimensiunea vectorului alcatuit din cantitatile produselor din lista3, pentru introducerea cantitatilor din vector in ordinea RSD, iar preorder pentru a afisa RSD in ordine elementele din arbore.
Functiile stergere_lista1, stergere_lista2, stergere_lista3 sunt folosite pentru a elibera memoria alocata dinamic pentru cele trei liste.
In main, deschid cele patru fisiere si apelez functiile citire1 si citire2. Apoi citesc sase variabile pentru cele sase cerinte ale problemei si bugetul pentru cerinta 3.Am creat un meniu in care depinzand de cerintele date de problema afisez lista1, lista2 sau lista3. Pentru cerinta 5, arborele creat, iar pentru cerinta 6 vectorul creat in functia pstiva. 